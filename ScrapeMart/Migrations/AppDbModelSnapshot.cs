// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScrapeMart.Storage;

#nullable disable

namespace ScrapeMart.Migrations
{
    [DbContext(typeof(AppDb))]
    partial class AppDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScrapeMart.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDbId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RetailerHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("ParentDbId");

                    b.HasIndex("RetailerHost", "CategoryId")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.CommercialOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CapturedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PriceValidUntilUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceWithoutDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellerDbId")
                        .HasColumnType("int");

                    b.Property<decimal>("SpotPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SellerDbId");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkuDbId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkuDbId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CacheId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RetailerHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RetailerHost", "ProductId")
                        .IsUnique();

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductDbId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryDbId")
                        .HasColumnType("int");

                    b.HasKey("ProductDbId", "CategoryDbId");

                    b.HasIndex("CategoryDbId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductDbId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDbId", "Name");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("SellerDefault")
                        .HasColumnType("bit");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkuDbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkuDbId", "SellerId")
                        .IsUnique();

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Sku", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ean")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameComplete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductDbId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Ean");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("ProductDbId");

                    b.ToTable("Skus", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Sucursal", b =>
                {
                    b.Property<int>("IdBandera")
                        .HasColumnType("int");

                    b.Property<int>("IdComercio")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<string>("SucursalesCodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SucursalesLatitud")
                        .HasColumnType("float");

                    b.Property<double>("SucursalesLongitud")
                        .HasColumnType("float");

                    b.Property<string>("SucursalesNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBandera", "IdComercio", "IdSucursal");

                    b.ToTable("Sucursales", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.VtexPickupPoint", b =>
                {
                    b.Property<string>("RetailerHost")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PickupPointId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SourceIdBandera")
                        .HasColumnType("int");

                    b.Property<int?>("SourceIdComercio")
                        .HasColumnType("int");

                    b.Property<int?>("SourceIdSucursal")
                        .HasColumnType("int");

                    b.HasKey("RetailerHost", "PickupPointId");

                    b.ToTable("VtexPickupPoints", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.VtexRetailersConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("RetailerHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetailerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesChannels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VtexRetailersConfig", (string)null);
                });

            modelBuilder.Entity("ScrapeMart.Entities.Category", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentDbId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ScrapeMart.Entities.CommercialOffer", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Seller", "Seller")
                        .WithMany("Offers")
                        .HasForeignKey("SellerDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Image", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Sku", "Sku")
                        .WithMany("Images")
                        .HasForeignKey("SkuDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("ScrapeMart.Entities.ProductCategory", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrapeMart.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ScrapeMart.Entities.ProductProperty", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Seller", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Sku", "Sku")
                        .WithMany("Sellers")
                        .HasForeignKey("SkuDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Sku", b =>
                {
                    b.HasOne("ScrapeMart.Entities.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("Properties");

                    b.Navigation("Skus");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Seller", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("ScrapeMart.Entities.Sku", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Sellers");
                });
#pragma warning restore 612, 618
        }
    }
}
